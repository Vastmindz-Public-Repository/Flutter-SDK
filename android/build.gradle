import java.security.MessageDigest
import java.security.NoSuchAlgorithmException


group 'com.example.rppg_common'
version '1.0-SNAPSHOT'


buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        mavenCentral()
        google()
        maven { url "https://maven.google.com" }
        jcenter()
        maven { url "https://jitpack.io" }
    }

//    7.3.0
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// Add this
String localMavenPath = project.mkdir("build").absolutePath

allprojects {
    repositories {
        mavenCentral()
        google()
        maven {
            url "https://maven.google.com"
        }
        jcenter()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'


buildscript {
    ext {
        appCompatVersion = '1.1.0'
        cardViewVersion = '1.0.0'
        espressoVersion = '3.2.0'
        junitVersion = '4.13'
        legacySupportVersion = '1.0.0'
        lifecycleVersion = '2.0.0'
        recyclerViewVersion = '1.1.0'
        roomVersion = '2.4.3'
        constraintLayoutVersion = '1.1.3'
        lifecycleKtxVersion = '2.3.0'
        lifecycleExtensionsVersion = '2.2.0'
        savedStateVersion = '2.2.0'
        moshiVersion = '1.12.0'
        retrofitVersion = '2.9.0'
        okhttp = '3.9.0'
        androidXCore = "1.7.0"
    }
}

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.example.rppg_common'
    }

    compileSdk 34 //29

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 34
        multiDexEnabled true
    }

//    lintOptions {
//        checkReleaseBuilds false
//    }

    lintOptions {
        disable 'InvalidPackage'
    }

    ndkVersion '21.3.6528147'
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libopencv_java4.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libopencv_java4.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/x86_64/libopencv_java4.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86/libopencv_java4.so'
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'

        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation 'androidx.core:core-ktx:1.3.1'
        implementation 'androidx.appcompat:appcompat:1.2.0'
        implementation 'androidx.constraintlayout:constraintlayout:2.0.1'


        implementation 'com.intuit.sdp:sdp-android:1.0.6'

        implementation 'com.google.android.material:material:1.1.0'


        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'

        implementation "androidx.legacy:legacy-support-v4:$legacySupportVersion"
        implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"

        implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtensionsVersion"
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleKtxVersion"
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleKtxVersion"

        implementation "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"


        implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0"
        implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.4.0"

        implementation "com.squareup.moshi:moshi:$moshiVersion"
        implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"


        implementation "com.squareup.okhttp3:okhttp:$okhttp"
        implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"

        implementation 'com.neovisionaries:nv-websocket-client:2.4'


        implementation "androidx.work:work-runtime-ktx:2.9.0"


        implementation 'com.google.mlkit:face-detection:16.0.0'


        // Saved state module
        implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$savedStateVersion"
        implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.3'

        // camerax
        def camerax_version = "1.0.0-rc01"
        def camerax_view_version = "1.0.0-alpha20"
        api "androidx.camera:camera-core:${camerax_version}"
        api "androidx.camera:camera-camera2:${camerax_version}"
        api "androidx.camera:camera-lifecycle:${camerax_version}"
        api "androidx.camera:camera-view:${camerax_view_version}"

        //mlkit
        def mlkit_version = "16.0.3"
        api "com.google.mlkit:face-detection:${mlkit_version}"

        implementation 'com.google.code.gson:gson:2.9.1'


    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

}


//dependencies {
//    implementation files('libs/rppg-common-0.5.2.aar')
//    implementation files('libs/rppg-core-0.2.0.aar')
//    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
//}


String aarPath = localMavenPath
task useAar {
    File file = project.file("libs")
    if (file.exists() && file.isDirectory()) {
        file.listFiles(new FileFilter() {
            @Override
            boolean accept(File pathname) {
                return pathname.name.endsWith(".aar")
            }
        }).each { item ->
            String aarName = item.name.substring(0, item.name.length() - 4)
            String[] aarInfo = aarName.split("-")
            String sha1 = getFileSha1(item)
            String md5 = getFileMD5(item)
            String fromStr = item.path
            String intoStr = aarPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]
            String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"

            project.copy {
                from fromStr
                into intoStr
                rename(item.name, newName)
            }

            project.file(intoStr + "/" + newName + ".md5").write(md5)
            project.file(intoStr + "/" + newName + ".sha1").write(sha1)

            String pomPath = intoStr + "/" + newName.substring(0, newName.length() - 4) + ".pom"
            project.file(pomPath).write(createPomStr(aarInfo[0], aarInfo[1], aarInfo[2]))
            project.file(pomPath + ".md5").write(getFileMD5(project.file(pomPath)))
            project.file(pomPath + ".sha1").write(getFileSha1(project.file(pomPath)))

            String metadataPath = project.file(intoStr).getParentFile().path + "/maven-metadata.xml"
            project.file(metadataPath).write(createMetadataStr(aarInfo[0], aarInfo[1], aarInfo[2]))
            project.file(metadataPath + ".md5").write(getFileMD5(project.file(metadataPath)))
            project.file(metadataPath + ".sha1").write(getFileSha1(project.file(metadataPath)))
            dependencies {
                implementation "${aarInfo[0]}:${aarInfo[1]}:${aarInfo[2]}"
            }
        }
    }
}

public static String createMetadataStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<metadata>\n" +
            "  <groupId>$groupId</groupId>\n" +
            "  <artifactId>$artifactId</artifactId>\n" +
            "  <versioning>\n" +
            "    <release>$version</release>\n" +
            "    <versions>\n" +
            "      <version>$version</version>\n" +
            "    </versions>\n" +
            "    <lastUpdated>${new Date().format('yyyyMMdd')}000000</lastUpdated>\n" +
            "  </versioning>\n" +
            "</metadata>\n"
}

public static String createPomStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n" +
            "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
            "  <modelVersion>4.0.0</modelVersion>\n" +
            "  <groupId>$groupId</groupId>\n" +
            "  <artifactId>$artifactId</artifactId>\n" +
            "  <version>$version</version>\n" +
            "  <packaging>aar</packaging>\n" +
            "</project>\n"
}

public static String getFileSha1(File file) {
    FileInputStream input = null;
    try {
        input = new FileInputStream(file);
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] buffer = new byte[1024 * 1024 * 10];

        int len = 0;
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len);
        }
        String sha1 = new BigInteger(1, digest.digest()).toString(16);
        int length = 40 - sha1.length();
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                sha1 = "0" + sha1;
            }
        }
        return sha1;
    }
    catch (IOException e) {
        System.out.println(e);
    }
    catch (NoSuchAlgorithmException e) {
        System.out.println(e);
    }
    finally {
        try {
            if (input != null) {
                input.close();
            }
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }
}

public static String getFileMD5(File file) {
    FileInputStream input = null;
    try {
        input = new FileInputStream(file);
        MessageDigest digest = MessageDigest.getInstance("MD5");
        byte[] buffer = new byte[1024 * 1024 * 10];

        int len = 0;
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len);
        }
        String md5 = new BigInteger(1, digest.digest()).toString(16);
        int length = 32 - md5.length();
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                md5 = "0" + md5;
            }
        }
        return md5;
    }
    catch (IOException e) {
        System.out.println(e);
    }
    catch (NoSuchAlgorithmException e) {
        System.out.println(e);
    }
    finally {
        try {
            if (input != null) {
                input.close();
            }
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }
}


