#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef RPPGCOMMON_SWIFT_H
#define RPPGCOMMON_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RPPGCommon",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


typedef SWIFT_ENUM(NSInteger, RPPGAnalysisInterruptionReason, open) {
/// Reporting of this interruption means that facade state switched to <code>prepared</code>.
/// After such interruption video should be started first and only after that analysis can be started.
  RPPGAnalysisInterruptionReasonVideoSessionStopped = 0,
/// Reporting of this interruption means that facade state switched to <code>videoStarted</code>.
/// After such interruption analysis can be started again.
  RPPGAnalysisInterruptionReasonWebSocketFailed = 1,
};

@class UIColor;
@class NSCoder;
@class CALayer;

SWIFT_CLASS("_TtC10RPPGCommon14RPPGCameraView")
@interface RPPGCameraView : UIView
@property (nonatomic, strong) UIColor * _Nullable meshColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)cleanMesh;
@end

@protocol RPPGCommonFacadeRawDelegate;
enum RPPGFacadeState : NSInteger;
@class NSString;
@class RPPGVideoSessionSettings;
@class NSURL;

SWIFT_CLASS("_TtC10RPPGCommon16RPPGCommonFacade")
@interface RPPGCommonFacade : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, weak) id <RPPGCommonFacadeRawDelegate> _Nullable rawDelegate;
/// Internal state of the facade.
/// Valid state transitions are: <code>initial -> prepared <-> videoStarted <-> analysisRunning</code>
@property (nonatomic, readonly) enum RPPGFacadeState state;
/// Camera view which will render the captured video. Responsible for rendering of the mesh.
@property (nonatomic, readonly, strong) RPPGCameraView * _Nonnull cameraView;
/// Framework version
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Prepares video session.
/// Should be invoked only when <code>state</code> is either <code>initial</code> or <code>prepared</code> otherwise will have no effect.
/// Will change <code>state</code> to <code>prepared</code> in case of success.
/// \param settings settings to be applied
///
- (void)configureWithSettings:(RPPGVideoSessionSettings * _Nonnull)settings;
/// Asks for permissions to access camera.
/// \param completion completion block informing if permissions are/were grunted.
///
- (void)askPermissionsWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Starts video capturing.
/// Should be invoked only when <code>state</code> is <code>prepared</code> otherwise will have no effect.
/// Will change <code>state</code> to <code>videoStarted</code> in case of success.
- (void)startVideo;
/// Stops video capturing.
/// Should be invoked only when <code>state</code> is <code>videoStarted</code> otherwise will have no effect.
/// Will change <code>state</code> to <code>prepared</code> in case of success.
- (void)stopVideo;
/// Starts analysis.
/// Should be invoked only when <code>state</code> is <code>videoStarted</code> otherwise will have no effect.
/// Will change <code>state</code> to <code>analysisRunning</code> in case of success.
- (void)startAnalysisWithSocketURL:(NSURL * _Nonnull)socketURL;
/// Stops analysis.
/// Should be invoked only when <code>state</code> is <code>analysisRunning</code> otherwise will have no effect.
/// Will change <code>state</code> to <code>videoStarted</code> in case of success.
- (void)stopAnalysis;
/// Enables or disables debug logs to console
/// You can use this API or directly set desired mode for <code>RPPGLog.shared</code> object.
/// \param shouldEnable whether logging should be enabled or not
///
+ (void)enableDebugLogs:(BOOL)shouldEnable;
@end







SWIFT_PROTOCOL("_TtP10RPPGCommon27RPPGCommonFacadeRawDelegate_")
@protocol RPPGCommonFacadeRawDelegate
- (void)facadeDidReceiveSocketConnected:(RPPGCommonFacade * _Nonnull)facade;
- (void)facadeDidReceiveSocketDisconnected:(RPPGCommonFacade * _Nonnull)facade;
- (void)facadeDidReceiveSocketCancelled:(RPPGCommonFacade * _Nonnull)facade;
- (void)facade:(RPPGCommonFacade * _Nonnull)facade didReceiveMessageFromSocket:(NSString * _Nonnull)message;
- (void)facade:(RPPGCommonFacade * _Nonnull)facade analysisInterrupted:(enum RPPGAnalysisInterruptionReason)reason error:(NSError * _Nullable)error;
- (void)facade:(RPPGCommonFacade * _Nonnull)facade interruptionWithReason:(NSString * _Nonnull)reason;
@end

/// Possible states of the facade object.
/// Valid transitions between states are:
/// \code
/// `initial` <-> `prepared` <-> `videoStarted` <-> `analysisRunning`
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, RPPGFacadeState, open) {
/// Initial state of the facade (right after initialization).
  RPPGFacadeStateInitial = 0,
/// State of the facade when video session is configured. Web socket is not configured yet.
  RPPGFacadeStatePrepared = 1,
/// State of the facade when input and output devices of video session are initialized
/// and connected to session, input video should be already rendered in RPPGCameraView.
  RPPGFacadeStateVideoStarted = 2,
/// State of the facade when both video session and web socket are configured and running, images captured and
/// passed to face detector, BGR signals calculated and submitted to the backend and vitals should be received
/// through web socket (analysis is running).
  RPPGFacadeStateAnalysisRunning = 3,
};


SWIFT_CLASS("_TtC10RPPGCommon23RPPGVideoSessionService")
@interface RPPGVideoSessionService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface RPPGVideoSessionService (SWIFT_EXTENSION(RPPGCommon)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end


enum CameraPosition : NSInteger;

SWIFT_CLASS("_TtC10RPPGCommon24RPPGVideoSessionSettings")
@interface RPPGVideoSessionSettings : NSObject
@property (nonatomic, readonly) CMTimeScale fps;
@property (nonatomic, readonly) enum CameraPosition cameraPosition;
- (nonnull instancetype)initWithFps:(CMTimeScale)fps cameraPosition:(enum CameraPosition)cameraPosition OBJC_DESIGNATED_INITIALIZER;
/// Default video session settings with <code>fps</code> set to <code>30</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) RPPGVideoSessionSettings * _Nonnull default_;)
+ (RPPGVideoSessionSettings * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CameraPosition, open) {
  CameraPositionFront = 0,
  CameraPositionBack = 1,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
